"""
app_flask.py – Backend Flask para recibir reportes (lat/lon/fecha/imagen_base64)
Compatibilidad:
- Acepta JSON y form-data.
- Soporta sinónimos: lat/latitud/latitude, lon/longitud/longitude,
  imagen_base64/foto_base64/photo_base64, fecha/date/timestamp.
- Limpia prefijos de data URL: "data:image/...;base64,..." si llegan así.
- Guarda en SQLite (reportes.db).
"""

from flask import Flask, request, jsonify, render_template
from datetime import datetime
import sqlite3
import os

app = Flask(__name__)

# --- Base de datos ---
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_FILE = os.path.join(BASE_DIR, "reportes.db")


def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(
        """
        CREATE TABLE IF NOT EXISTS reportes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            lat REAL,
            lon REAL,
            fecha TEXT,
            foto_base64 TEXT
        )
        """
    )
    conn.commit()
    conn.close()


init_db()
print("DB PATH:", DB_FILE)


# --- Helper para tomar el primer valor no vacío entre JSON y form-data ---
def pick(data: dict, *keys):
    """
    Devuelve el primer valor no vacío encontrado entre el JSON (data)
    y form-data (request.form) para cualquiera de las keys provistas.
    """
    for k in keys:
        v = None
        if isinstance(data, dict):
            v = data.get(k)
        if v in (None, ""):
            v = request.form.get(k)
        if v not in (None, ""):
            return v
    return None


# --- Endpoints ---

# POST /reportes: recibe y almacena un reporte
@app.route("/reportes", methods=["POST"])
def recibir_reporte():
    # Lee JSON si viene; si no, data = {}
    data = request.get_json(silent=True) or {}

    # Sinónimos aceptados
    lat_raw = pick(data, "latitud", "lat", "latitude")
    lon_raw = pick(data, "longitud", "lon", "longitude")
    fecha = pick(data, "fecha", "date", "timestamp") or datetime.utcnow().date().isoformat()
    foto_b64 = pick(data, "imagen_base64", "foto_base64", "photo_base64", "imagen")

    # Si llega como data URL, eliminar prefijo "data:image/...;base64,"
    if isinstance(foto_b64, str) and foto_b64.startswith("data:image"):
        try:
            foto_b64 = foto_b64.split(",", 1)[1]
        except Exception:
            pass

    # Normalización a float
    try:
        lat = float(lat_raw) if lat_raw is not None else None
    except Exception:
        lat = None
    try:
        lon = float(lon_raw) if lon_raw is not None else None
    except Exception:
        lon = None

    # Logs de depuración
    print("REQ JSON =>", data)
    if request.form:
        print("REQ FORM =>", dict(request.form))

    # Validación básica
    if lat is None or lon is None or not foto_b64:
        return jsonify(
            {
                "ok": False,
                "error": "falta lat/lon/imagen_base64",
                "recibido": {
                    "lat": lat_raw,
                    "lon": lon_raw,
                    "fecha": fecha,
                    "tiene_imagen": bool(foto_b64),
                },
            }
        ), 400

    # Insertar en SQLite
    try:
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        c.execute(
            "INSERT INTO reportes (lat, lon, fecha, foto_base64) VALUES (?, ?, ?, ?)",
            (lat, lon, fecha, foto_b64),
        )
        new_id = c.lastrowid
        conn.commit()
        conn.close()
        print("INSERT OK =>", fecha, lat, lon, "id:", new_id)
        return jsonify({"ok": True, "id": new_id}), 201
    except Exception as e:
        print("DB ERROR =>", e)
        return jsonify({"ok": False, "error": str(e)}), 500


# GET /reportes: devuelve todos los reportes
@app.route("/reportes", methods=["GET"])
def obtener_reportes():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT lat, lon, fecha, foto_base64 FROM reportes ORDER BY id DESC")
    rows = c.fetchall()
    conn.close()

    reportes = [
        {"lat": r[0], "lon": r[1], "fecha": r[2], "foto_base64": r[3]} for r in rows
    ]
    return jsonify(reportes)


# Página principal (mapa/lista)
@app.route("/")
def home():
    return render_template("mapa.html")


# DELETE /borrar_todos: limpia la tabla
@app.route("/borrar_todos", methods=["DELETE"])
def borrar_todos():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("DELETE FROM reportes")
    conn.commit()
    conn.close()
    return jsonify({"mensaje": "Todos los reportes han sido eliminados"}), 200


# --- Arranque ---
if __name__ == "__main__":
    # Mantener 8080 (si usas cloudflared/ngrok o Wi-Fi local)
    app.run(host="0.0.0.0", port=8080, debug=True)
